{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1oSecoSrJK1SVIWK9fEx6ckYfTmyz3_kh","timestamp":1668496680320},{"file_id":"https://github.com/inhovation97/personal_project/blob/main/pytorch/pytorch_project_resnet50.ipynb","timestamp":1668063178943}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"_5SyFDlRs8ze"},"source":["# 이미지 데이터 파이토치 커스터마이징하기"]},{"cell_type":"code","metadata":{"id":"Th61J-4wtknJ","executionInfo":{"status":"ok","timestamp":1668496751791,"user_tz":-540,"elapsed":2405,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["import torch\n","import torchvision\n","from torchvision import transforms # 이미지 데이터 transform\n","from torch.utils.data import DataLoader # 이미지 데이터 로더\n","import os\n","import glob"],"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSJXjDMdaFXb","executionInfo":{"status":"ok","timestamp":1668496798430,"user_tz":-540,"elapsed":19685,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"5f5bc769-9380-4a63-d35a-f68782b86928"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"K0An2e3Nrq8H","executionInfo":{"status":"ok","timestamp":1668496826582,"user_tz":-540,"elapsed":331,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","torch.manual_seed(777)\n","if device == 'cuda':\n","  torch.cuda.manual_seed_all(777)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"I77GUH6Qrq3T","executionInfo":{"status":"ok","timestamp":1668497070041,"user_tz":-540,"elapsed":348,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["# 경로 지정\n","\n","train_path = '/content/drive/MyDrive/image/train'\n","test_path = '/content/drive/MyDrive/image/test'\n","Dataset_path = '/content/drive/MyDrive/image'\n","\n","yes_dir = '/yes/'\n","no_dir = '/no/'"],"execution_count":20,"outputs":[]},{"cell_type":"code","source":["from torch.utils.data import Dataset, DataLoader # 데이터 커스터마이징\n","from PIL import Image # PIL = Python Image Library\n","import cv2 # albumentation transform을 쓰려면 꼭 이 라이브러리를 이용\n","import tensorflow as tf\n","\n","class inhovation_Dataset(Dataset):\n","\n","  def __init__(self, file_path, mode, transform=None):\n","    self.all_data = sorted(glob.glob(os.path.join(file_path, mode, '*', '*')))\n","    self.transform = transform\n","\n","  def __getitem__(self, index):\n","\n","    if torch.is_tensor(index):        # 인덱스가 tensor 형태일 수 있으니 리스트 형태로 바꿔준다.\n","       index = index.tolist()\n","\n","    #data_path = self.all_data[index]\n","    #img = np.array(Image.open(data_path).convert(\"RGB\")) # albumenatation transform을 쓰려면 cv2 라이브러리로 이미지를 읽어야 함\n","    image=cv2.imread(train_path)\n","    image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # BGR -> RGB 변환\n","    image=cv2.imread(test_path)\n","    image=cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # BGR -> RGB 변환\n","\n","    # transform 적용\n","    if self.transform is not None:    \n","       augmented = self.transform(image=image)\n","       image = augmented['image'] \n","\n","\n","  def __len__(self):\n","    length = len(self.all_data)\n","    return length"],"metadata":{"id":"PIVy_HyRLCz0","executionInfo":{"status":"ok","timestamp":1668498154290,"user_tz":-540,"elapsed":3,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"execution_count":87,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cN6uBbo5Iqlm"},"source":["# 이미지 데이터 전처리   \n","> 파이토치 라이브러리를 이용한 쉬운 방법 or albumentation 라이브러리를 이용한 데이터 커스터마이징 2가지 방식으로 진행합니다.\n","\n"," 1. 이미지를 resize합니다.   \n","    \n"," 2. resize한 이미지에 대해서 스케일링을 준비합니다.   \n","    \n"," 3. 전처리한 이미지들을 augmentation해줍니다.   \n","   \n"," 4. augmentation transform을 진행했으면, data loader로 학습을 준비합니다."]},{"cell_type":"markdown","metadata":{"id":"YTc559LqKV6z"},"source":["## 파이토치 라이브러리를 이용해 쉽게 진행\n","1. 이미지 resize & 스케일링\n","> 꼭 resize를 진행한 이미지들을 스케일링 해줍니다.   "]},{"cell_type":"code","metadata":{"id":"FItktxnhh30j","executionInfo":{"status":"ok","timestamp":1668497480635,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["resize_trans = transforms.Compose([\n","                                   transforms.Resize((128,128)),\n","                                   transforms.ToTensor()\n","])\n","\n","resize_train = torchvision.datasets.ImageFolder(root=train_path, transform=resize_trans)\n","resize_test = torchvision.datasets.ImageFolder(root=test_path, transform=resize_trans)"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u48iThG_oD7q","outputId":"ea8ae6e5-bdab-4ea6-e682-55b185615a83","executionInfo":{"status":"ok","timestamp":1668497483362,"user_tz":-540,"elapsed":6,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["resize_train[0][0].shape # ToTensor를 진행했기 때문에 데이터가 torch(C,H,W) 형태로 바뀜"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([3, 128, 128])"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jXASAt6-9hXv","outputId":"423230c3-8d98-4cde-bdbf-b593b42ad3e3","executionInfo":{"status":"ok","timestamp":1668497484860,"user_tz":-540,"elapsed":5,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["resize_train[0][0]"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[[0.6078, 0.6078, 0.6078,  ..., 0.0471, 0.0471, 0.0510],\n","         [0.6157, 0.6157, 0.6157,  ..., 0.0667, 0.0706, 0.0745],\n","         [0.5843, 0.6039, 0.6157,  ..., 0.0902, 0.0902, 0.0902],\n","         ...,\n","         [0.8745, 0.8745, 0.8745,  ..., 0.7765, 0.7765, 0.7765],\n","         [0.8706, 0.8706, 0.8667,  ..., 0.7725, 0.7725, 0.7725],\n","         [0.8745, 0.8745, 0.8706,  ..., 0.7765, 0.7804, 0.7765]],\n","\n","        [[0.5882, 0.5882, 0.5882,  ..., 0.0784, 0.0784, 0.0824],\n","         [0.5961, 0.5961, 0.5961,  ..., 0.0941, 0.1020, 0.1059],\n","         [0.5647, 0.5882, 0.5961,  ..., 0.1216, 0.1216, 0.1216],\n","         ...,\n","         [0.8392, 0.8392, 0.8392,  ..., 0.7137, 0.7137, 0.7137],\n","         [0.8353, 0.8353, 0.8314,  ..., 0.7098, 0.7098, 0.7098],\n","         [0.8275, 0.8275, 0.8235,  ..., 0.7098, 0.7137, 0.7098]],\n","\n","        [[0.5647, 0.5647, 0.5647,  ..., 0.0902, 0.0902, 0.0941],\n","         [0.5725, 0.5725, 0.5725,  ..., 0.1098, 0.1137, 0.1176],\n","         [0.5412, 0.5647, 0.5725,  ..., 0.1333, 0.1333, 0.1333],\n","         ...,\n","         [0.7804, 0.7804, 0.7804,  ..., 0.6510, 0.6510, 0.6510],\n","         [0.7765, 0.7765, 0.7725,  ..., 0.6471, 0.6471, 0.6471],\n","         [0.7686, 0.7686, 0.7647,  ..., 0.6471, 0.6431, 0.6392]]])"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sMiOxJFtn0OX","outputId":"671c6d89-c981-442a-a640-5d914af4a494","executionInfo":{"status":"ok","timestamp":1668497487149,"user_tz":-540,"elapsed":3,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["import numpy as np\n","np.mean(resize_train[0][0].numpy(),axis=(1,2)) # numpy로 바꾸고, axis = 1,2 mean으로 RGB mean/std 뽑기"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.5904517 , 0.5894799 , 0.57221967], dtype=float32)"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"QGYovru-h3w-","executionInfo":{"status":"ok","timestamp":1668497489037,"user_tz":-540,"elapsed":3,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["def get_mean_std(dataset):\n","  meanRGB = [np.mean(image.numpy(), axis=(1,2)) for image,_ in dataset]\n","  stdRGB = [np.std(image.numpy(), axis=(1,2)) for image,_ in dataset]\n","\n","  meanR = np.mean([m[0] for m in meanRGB])\n","  meanG = np.mean([m[1] for m in meanRGB])\n","  meanB = np.mean([m[2] for m in meanRGB])\n","\n","  stdR = np.mean([s[0] for s in stdRGB])\n","  stdG = np.mean([s[1] for s in stdRGB])\n","  stdB = np.mean([s[2] for s in stdRGB])\n","\n","  print(meanR, meanG, meanB)\n","  print(stdR, stdG, stdB)"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"IRpbrXwmDU3A","executionInfo":{"status":"ok","timestamp":1668497490320,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["#get_mean_std(resize_train)"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"id":"qzRTUme7h3uN","executionInfo":{"status":"ok","timestamp":1668497491502,"user_tz":-540,"elapsed":6,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["#get_mean_std(resize_test)"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"id":"dqJqtWrZC1lZ","executionInfo":{"status":"ok","timestamp":1668497491503,"user_tz":-540,"elapsed":6,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["# normalization 준비\n","\n","resize_train_mean=[0.17191947, 0.41128376, 0.56153077]\n","resize_train_std=[0.16150557, 0.16577946, 0.16063999]\n","\n","resize_test_mean=[0.15918699, 0.410329, 0.55247366]\n","resize_test_std=[0.1542138, 0.16098696, 0.15552239]"],"execution_count":54,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ji1tlhr1g5wL"},"source":["3. transform을 이용해 data augmentation하기"]},{"cell_type":"code","source":["import albumentations\n","from torchvision import transforms # 이미지 데이터 transform\n","from torch.utils.data import DataLoader # 이미지 데이터 로더\n","import albumentations.pytorch\n","\n","albumentations_train = albumentations.Compose([\n","                                                \n","    albumentations.Resize(224, 224),   \n","    albumentations.OneOf([\n","                          albumentations.HorizontalFlip(p=0.8), # p확률로 이미지 좌우 반전\n","                          albumentations.RandomRotate90(p=0.8), # p확률로 90도 회전\n","                          albumentations.VerticalFlip(p=0.8) # p확률로 이미지 상하 반전\n","    ], p=1),\n","\n","    albumentations.OneOf([\n","                          albumentations.MotionBlur(p=0.8), # p확률로 이미지를 흐리게(?) 만들어 줌\n","                          albumentations.OpticalDistortion(p=0.8), # p확률로 이미지 왜곡\n","                          albumentations.GaussNoise(p=0.8) # 임의의 noise를 삽입          \n","    ], p=1),\n","    # albumentations.Normalize(mean = resize_train_mean, std = resize_train_std),\n","    albumentations.pytorch.ToTensorV2()\n","    \n","])\n","\n","albumentations_test = albumentations.Compose([\n","                                                \n","    albumentations.Resize(224, 224),\n","    albumentations.pytorch.ToTensorV2()\n","    \n","])\n","\n","\n","trainset=inhovation_Dataset(Dataset_path, 'train', transform=albumentations_train)\n","testset=inhovation_Dataset(Dataset_path, 'test', transform=albumentations_test)\n","\n","albumentations_train_loader = torch.utils.data.DataLoader(trainset, batch_size=16,\n","                                          shuffle=True, num_workers=0)\n","\n","albumentations_test_loader = torch.utils.data.DataLoader(testset, batch_size=16,\n","                                         shuffle=False, num_workers=0)"],"metadata":{"id":"47zuXIt-Kd3I","executionInfo":{"status":"ok","timestamp":1668497492134,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2RrWjRB6dJ1z"},"source":["augmentation을 적용한 상어 이미지 확인하기"]},{"cell_type":"markdown","metadata":{"id":"A5RaH7MIhELb"},"source":["data loader까지 정의했으니 이제 학습을 위한 데이터 준비는 끝났습니다!"]},{"cell_type":"markdown","metadata":{"id":"Pq0evsP8ke_2"},"source":["# resnet 50 아키텍쳐 구성"]},{"cell_type":"code","metadata":{"id":"VaYnM5VRUcdc","executionInfo":{"status":"ok","timestamp":1668497879107,"user_tz":-540,"elapsed":985,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"80ea202c-f574-4923-bc46-6c0a68ec013e"},"source":["# import resnet\n","\n","from torchvision import models\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","resnet50 = models.resnet50(pretrained=False).to(device)"],"execution_count":70,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n","  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n","/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]}]},{"cell_type":"code","source":["resnet50.fc = nn.Linear(resnet50.fc.in_features, 2).to(device)"],"metadata":{"id":"9ff85T8BOUjU","executionInfo":{"status":"ok","timestamp":1668497906373,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["from torchsummary import summary\n","summary(resnet50, input_size=(3, 224, 224))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sbC5hmrvOWjl","executionInfo":{"status":"ok","timestamp":1668497908098,"user_tz":-540,"elapsed":6,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"5a9ff31b-fac1-4c04-c770-94cb3787d254"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1         [-1, 64, 112, 112]           9,408\n","       BatchNorm2d-2         [-1, 64, 112, 112]             128\n","              ReLU-3         [-1, 64, 112, 112]               0\n","         MaxPool2d-4           [-1, 64, 56, 56]               0\n","            Conv2d-5           [-1, 64, 56, 56]           4,096\n","       BatchNorm2d-6           [-1, 64, 56, 56]             128\n","              ReLU-7           [-1, 64, 56, 56]               0\n","            Conv2d-8           [-1, 64, 56, 56]          36,864\n","       BatchNorm2d-9           [-1, 64, 56, 56]             128\n","             ReLU-10           [-1, 64, 56, 56]               0\n","           Conv2d-11          [-1, 256, 56, 56]          16,384\n","      BatchNorm2d-12          [-1, 256, 56, 56]             512\n","           Conv2d-13          [-1, 256, 56, 56]          16,384\n","      BatchNorm2d-14          [-1, 256, 56, 56]             512\n","             ReLU-15          [-1, 256, 56, 56]               0\n","       Bottleneck-16          [-1, 256, 56, 56]               0\n","           Conv2d-17           [-1, 64, 56, 56]          16,384\n","      BatchNorm2d-18           [-1, 64, 56, 56]             128\n","             ReLU-19           [-1, 64, 56, 56]               0\n","           Conv2d-20           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-21           [-1, 64, 56, 56]             128\n","             ReLU-22           [-1, 64, 56, 56]               0\n","           Conv2d-23          [-1, 256, 56, 56]          16,384\n","      BatchNorm2d-24          [-1, 256, 56, 56]             512\n","             ReLU-25          [-1, 256, 56, 56]               0\n","       Bottleneck-26          [-1, 256, 56, 56]               0\n","           Conv2d-27           [-1, 64, 56, 56]          16,384\n","      BatchNorm2d-28           [-1, 64, 56, 56]             128\n","             ReLU-29           [-1, 64, 56, 56]               0\n","           Conv2d-30           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-31           [-1, 64, 56, 56]             128\n","             ReLU-32           [-1, 64, 56, 56]               0\n","           Conv2d-33          [-1, 256, 56, 56]          16,384\n","      BatchNorm2d-34          [-1, 256, 56, 56]             512\n","             ReLU-35          [-1, 256, 56, 56]               0\n","       Bottleneck-36          [-1, 256, 56, 56]               0\n","           Conv2d-37          [-1, 128, 56, 56]          32,768\n","      BatchNorm2d-38          [-1, 128, 56, 56]             256\n","             ReLU-39          [-1, 128, 56, 56]               0\n","           Conv2d-40          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-41          [-1, 128, 28, 28]             256\n","             ReLU-42          [-1, 128, 28, 28]               0\n","           Conv2d-43          [-1, 512, 28, 28]          65,536\n","      BatchNorm2d-44          [-1, 512, 28, 28]           1,024\n","           Conv2d-45          [-1, 512, 28, 28]         131,072\n","      BatchNorm2d-46          [-1, 512, 28, 28]           1,024\n","             ReLU-47          [-1, 512, 28, 28]               0\n","       Bottleneck-48          [-1, 512, 28, 28]               0\n","           Conv2d-49          [-1, 128, 28, 28]          65,536\n","      BatchNorm2d-50          [-1, 128, 28, 28]             256\n","             ReLU-51          [-1, 128, 28, 28]               0\n","           Conv2d-52          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-53          [-1, 128, 28, 28]             256\n","             ReLU-54          [-1, 128, 28, 28]               0\n","           Conv2d-55          [-1, 512, 28, 28]          65,536\n","      BatchNorm2d-56          [-1, 512, 28, 28]           1,024\n","             ReLU-57          [-1, 512, 28, 28]               0\n","       Bottleneck-58          [-1, 512, 28, 28]               0\n","           Conv2d-59          [-1, 128, 28, 28]          65,536\n","      BatchNorm2d-60          [-1, 128, 28, 28]             256\n","             ReLU-61          [-1, 128, 28, 28]               0\n","           Conv2d-62          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-63          [-1, 128, 28, 28]             256\n","             ReLU-64          [-1, 128, 28, 28]               0\n","           Conv2d-65          [-1, 512, 28, 28]          65,536\n","      BatchNorm2d-66          [-1, 512, 28, 28]           1,024\n","             ReLU-67          [-1, 512, 28, 28]               0\n","       Bottleneck-68          [-1, 512, 28, 28]               0\n","           Conv2d-69          [-1, 128, 28, 28]          65,536\n","      BatchNorm2d-70          [-1, 128, 28, 28]             256\n","             ReLU-71          [-1, 128, 28, 28]               0\n","           Conv2d-72          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-73          [-1, 128, 28, 28]             256\n","             ReLU-74          [-1, 128, 28, 28]               0\n","           Conv2d-75          [-1, 512, 28, 28]          65,536\n","      BatchNorm2d-76          [-1, 512, 28, 28]           1,024\n","             ReLU-77          [-1, 512, 28, 28]               0\n","       Bottleneck-78          [-1, 512, 28, 28]               0\n","           Conv2d-79          [-1, 256, 28, 28]         131,072\n","      BatchNorm2d-80          [-1, 256, 28, 28]             512\n","             ReLU-81          [-1, 256, 28, 28]               0\n","           Conv2d-82          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-83          [-1, 256, 14, 14]             512\n","             ReLU-84          [-1, 256, 14, 14]               0\n","           Conv2d-85         [-1, 1024, 14, 14]         262,144\n","      BatchNorm2d-86         [-1, 1024, 14, 14]           2,048\n","           Conv2d-87         [-1, 1024, 14, 14]         524,288\n","      BatchNorm2d-88         [-1, 1024, 14, 14]           2,048\n","             ReLU-89         [-1, 1024, 14, 14]               0\n","       Bottleneck-90         [-1, 1024, 14, 14]               0\n","           Conv2d-91          [-1, 256, 14, 14]         262,144\n","      BatchNorm2d-92          [-1, 256, 14, 14]             512\n","             ReLU-93          [-1, 256, 14, 14]               0\n","           Conv2d-94          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-95          [-1, 256, 14, 14]             512\n","             ReLU-96          [-1, 256, 14, 14]               0\n","           Conv2d-97         [-1, 1024, 14, 14]         262,144\n","      BatchNorm2d-98         [-1, 1024, 14, 14]           2,048\n","             ReLU-99         [-1, 1024, 14, 14]               0\n","      Bottleneck-100         [-1, 1024, 14, 14]               0\n","          Conv2d-101          [-1, 256, 14, 14]         262,144\n","     BatchNorm2d-102          [-1, 256, 14, 14]             512\n","            ReLU-103          [-1, 256, 14, 14]               0\n","          Conv2d-104          [-1, 256, 14, 14]         589,824\n","     BatchNorm2d-105          [-1, 256, 14, 14]             512\n","            ReLU-106          [-1, 256, 14, 14]               0\n","          Conv2d-107         [-1, 1024, 14, 14]         262,144\n","     BatchNorm2d-108         [-1, 1024, 14, 14]           2,048\n","            ReLU-109         [-1, 1024, 14, 14]               0\n","      Bottleneck-110         [-1, 1024, 14, 14]               0\n","          Conv2d-111          [-1, 256, 14, 14]         262,144\n","     BatchNorm2d-112          [-1, 256, 14, 14]             512\n","            ReLU-113          [-1, 256, 14, 14]               0\n","          Conv2d-114          [-1, 256, 14, 14]         589,824\n","     BatchNorm2d-115          [-1, 256, 14, 14]             512\n","            ReLU-116          [-1, 256, 14, 14]               0\n","          Conv2d-117         [-1, 1024, 14, 14]         262,144\n","     BatchNorm2d-118         [-1, 1024, 14, 14]           2,048\n","            ReLU-119         [-1, 1024, 14, 14]               0\n","      Bottleneck-120         [-1, 1024, 14, 14]               0\n","          Conv2d-121          [-1, 256, 14, 14]         262,144\n","     BatchNorm2d-122          [-1, 256, 14, 14]             512\n","            ReLU-123          [-1, 256, 14, 14]               0\n","          Conv2d-124          [-1, 256, 14, 14]         589,824\n","     BatchNorm2d-125          [-1, 256, 14, 14]             512\n","            ReLU-126          [-1, 256, 14, 14]               0\n","          Conv2d-127         [-1, 1024, 14, 14]         262,144\n","     BatchNorm2d-128         [-1, 1024, 14, 14]           2,048\n","            ReLU-129         [-1, 1024, 14, 14]               0\n","      Bottleneck-130         [-1, 1024, 14, 14]               0\n","          Conv2d-131          [-1, 256, 14, 14]         262,144\n","     BatchNorm2d-132          [-1, 256, 14, 14]             512\n","            ReLU-133          [-1, 256, 14, 14]               0\n","          Conv2d-134          [-1, 256, 14, 14]         589,824\n","     BatchNorm2d-135          [-1, 256, 14, 14]             512\n","            ReLU-136          [-1, 256, 14, 14]               0\n","          Conv2d-137         [-1, 1024, 14, 14]         262,144\n","     BatchNorm2d-138         [-1, 1024, 14, 14]           2,048\n","            ReLU-139         [-1, 1024, 14, 14]               0\n","      Bottleneck-140         [-1, 1024, 14, 14]               0\n","          Conv2d-141          [-1, 512, 14, 14]         524,288\n","     BatchNorm2d-142          [-1, 512, 14, 14]           1,024\n","            ReLU-143          [-1, 512, 14, 14]               0\n","          Conv2d-144            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-145            [-1, 512, 7, 7]           1,024\n","            ReLU-146            [-1, 512, 7, 7]               0\n","          Conv2d-147           [-1, 2048, 7, 7]       1,048,576\n","     BatchNorm2d-148           [-1, 2048, 7, 7]           4,096\n","          Conv2d-149           [-1, 2048, 7, 7]       2,097,152\n","     BatchNorm2d-150           [-1, 2048, 7, 7]           4,096\n","            ReLU-151           [-1, 2048, 7, 7]               0\n","      Bottleneck-152           [-1, 2048, 7, 7]               0\n","          Conv2d-153            [-1, 512, 7, 7]       1,048,576\n","     BatchNorm2d-154            [-1, 512, 7, 7]           1,024\n","            ReLU-155            [-1, 512, 7, 7]               0\n","          Conv2d-156            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-157            [-1, 512, 7, 7]           1,024\n","            ReLU-158            [-1, 512, 7, 7]               0\n","          Conv2d-159           [-1, 2048, 7, 7]       1,048,576\n","     BatchNorm2d-160           [-1, 2048, 7, 7]           4,096\n","            ReLU-161           [-1, 2048, 7, 7]               0\n","      Bottleneck-162           [-1, 2048, 7, 7]               0\n","          Conv2d-163            [-1, 512, 7, 7]       1,048,576\n","     BatchNorm2d-164            [-1, 512, 7, 7]           1,024\n","            ReLU-165            [-1, 512, 7, 7]               0\n","          Conv2d-166            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-167            [-1, 512, 7, 7]           1,024\n","            ReLU-168            [-1, 512, 7, 7]               0\n","          Conv2d-169           [-1, 2048, 7, 7]       1,048,576\n","     BatchNorm2d-170           [-1, 2048, 7, 7]           4,096\n","            ReLU-171           [-1, 2048, 7, 7]               0\n","      Bottleneck-172           [-1, 2048, 7, 7]               0\n","AdaptiveAvgPool2d-173           [-1, 2048, 1, 1]               0\n","          Linear-174                    [-1, 2]           4,098\n","================================================================\n","Total params: 23,512,130\n","Trainable params: 23,512,130\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.57\n","Forward/backward pass size (MB): 286.55\n","Params size (MB): 89.69\n","Estimated Total Size (MB): 376.82\n","----------------------------------------------------------------\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# 첫 번째 layer의 filter를 확인해보자 (=가중치 확인) -> 나중에 학습을 완료한 후의 filter도 확인하기\n","for w in resnet50.parameters():\n","    w = w.data.cpu()\n","    print(w.shape)\n","    break\n","\n","# 가중치 renormalization\n","min_w = torch.min(w)\n","w1 = (-1/(2 * min_w)) * w + 0.5\n","\n","# make grid to display it\n","grid_size = len(w1)\n","x_grid = [w1[i] for i in range(grid_size)]\n","x_grid = torchvision.utils.make_grid(x_grid, nrow=8, padding=1)\n","\n","plt.figure(figsize=(10, 10))\n","imshow(x_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":610},"id":"czjJ_Vv_Ob0c","executionInfo":{"status":"ok","timestamp":1668497918629,"user_tz":-540,"elapsed":1725,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"1a802128-b9e1-40ac-b1e9-17ab11c84c4e"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([64, 3, 7, 7])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 첫 번째 layer의 filter를 확인해보자 (=가중치 확인) -> 나중에 학습을 완료한 후의 filter도 확인하기\n","for w in resnet50.parameters():\n","    w = w.data.cpu()\n","    print(w.shape)\n","    break\n","\n","# 가중치 renormalization\n","min_w = torch.min(w)\n","w1 = (-1/(2 * min_w)) * w + 0.5\n","\n","# make grid to display it\n","grid_size = len(w1)\n","x_grid = [w1[i] for i in range(grid_size)]\n","x_grid = torchvision.utils.make_grid(x_grid, nrow=8, padding=1)\n","\n","plt.figure(figsize=(10, 10))\n","imshow(x_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":610},"id":"jhLe1ntDOnsc","executionInfo":{"status":"ok","timestamp":1668497966203,"user_tz":-540,"elapsed":730,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"a718d679-79ff-4ae5-f1e8-57fe651ba51d"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([64, 3, 7, 7])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# config 모델 파라미터 인자를 만들기위한 클래스\n","class Config:\n","  def __init__(self, **kwargs):\n","    for key, value in kwargs.items():\n","      setattr(self, key, value)"],"metadata":{"id":"Kv4g10wIOqU7","executionInfo":{"status":"ok","timestamp":1668497976962,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["class train_test():\n","      def __init__(self, config):\n","        # 파라미터 인자\n","        self.trainloader = config.trainloader\n","        self.testloader = config.testloader\n","        self.model = config.model\n","        self.device = config.device\n","        self.optimizer = config.optimizer\n","        self.criterion = config.criterion\n","        self.globaliter = config.globaliter\n","        print(len(self.trainloader))\n","\n","      def train(self, epochs, log_interval):\n","          self.model.train()\n","          for epoch in range(1, epochs + 1 ):  # epochs 루프\n","              running_loss = 0.0\n","              #lr_sche.step()\n","              for i, data in enumerate(self.trainloader, 0): # batch 루프\n","                  # get the inputs\n","                  self.globaliter += 1\n","                  inputs, labels = data # input data, label 분리\n","                  inputs = inputs.to(self.device)\n","                  labels = labels.to(self.device)\n","\n","                  # 가중치 초기화 -> 이전 batch에서 계산되었던 가중치를 0으로 만들고 최적화 진행\n","                  self.optimizer.zero_grad() \n","\n","                  # forward + backward + optimize\n","                  outputs = self.model(inputs)\n","                  loss = self.criterion(outputs, labels)\n","                  loss.backward()\n","                  self.optimizer.step()\n","                  running_loss += loss.item()\n","\n","                  # 30 iteration마다 acc & loss 출력\n","                  if i % log_interval == log_interval -1 : # i는 1에포크의 iteration\n","                    print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tlearningLoss: {:.6f}\\twhole_loss: {:.6f} '.format(\n","                        epoch, i*len(inputs), len(self.trainloader.dataset),\n","                        100. * i*len(inputs) / len(self.trainloader.dataset), \n","                        running_loss / log_interval,\n","                        loss.item()))\n","                    running_loss = 0.0\n","\n","                    with train_summary_writer.as_default():  # 텐서보드에 등록하기\n","                         summary.scalar('loss', loss.item() , step = self.globaliter)\n","\n","              with torch.no_grad():\n","                  self.model.eval()\n","                  correct = 0\n","                  total = 0\n","                  test_loss = 0\n","                  acc = []\n","                  for k, data in enumerate(self.testloader, 0):\n","                    images, labels = data\n","                    images = images.to(self.device)\n","                    labels = labels.to(self.device)\n","                    outputs = self.model(images)\n","\n","                    _, predicted = torch.max(outputs.data, 1)\n","                    total += labels.size(0)\n","                    correct += (predicted == labels).sum().item()\n","                    test_loss += self.criterion(outputs, labels).item()\n","                    acc.append(100 * correct/total)\n","\n","                  print('\\nTest set : Average loss:{:.4f}, Accuracy: {}/{}({:.0f}%)\\n'.format(\n","                      test_loss, correct, total, 100 * correct/total\n","                  ))\n","                  with test_summary_writer.as_default():  # 텐서보드에 등록하기\n","                      summary.scalar('loss', test_loss , step = self.globaliter)\n","                      summary.scalar('accuracy', 100 * correct/total , step = self.globaliter)  \n","                      # if acc[k] > 80:\n","                      #    save_model( self.model, Dataset_path)\n","                      #    print('Succeed save the model')\n","\n","      print('Finished Training')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kN8yv57cOsa3","executionInfo":{"status":"ok","timestamp":1668497984956,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"8e699122-0b70-48d8-d982-ee1eccd1a7c6"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["Finished Training\n"]}]},{"cell_type":"code","metadata":{"id":"y0nDL-BJ-XBE","executionInfo":{"status":"ok","timestamp":1668498003176,"user_tz":-540,"elapsed":332,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["import matplotlib.pyplot as plt\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","    plt.show()"],"execution_count":79,"outputs":[]},{"cell_type":"code","metadata":{"id":"MjiuQhZ03gY5","executionInfo":{"status":"ok","timestamp":1668498016802,"user_tz":-540,"elapsed":4,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["lr = 0.00005\n","epochs = 30\n","optimizer = 'Adam'\n","dataset = 'train_loader'"],"execution_count":80,"outputs":[]},{"cell_type":"code","metadata":{"id":"NsctNJSGUcHc","executionInfo":{"status":"ok","timestamp":1668498024690,"user_tz":-540,"elapsed":2,"user":{"displayName":"정한이","userId":"07382370767374473405"}}},"source":["# 파라미터 클래스\n","config = Config(\n","    trainloader = albumentations_train_loader,\n","    testloader = albumentations_test_loader,\n","    model = resnet50,\n","    device = device,\n","    optimizer = torch.optim.Adam(resnet50.parameters(), lr=lr),\n","    criterion= nn.CrossEntropyLoss().to(device),\n","    globaliter = 0\n",")"],"execution_count":81,"outputs":[]},{"cell_type":"code","source":["ready_to_train=train_test(config)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FhM2aue0O5dZ","executionInfo":{"status":"ok","timestamp":1668498041361,"user_tz":-540,"elapsed":3,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"outputId":"bb213983-cb7e-4827-afd1-a4f0b73da2e9"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["95\n"]}]},{"cell_type":"code","source":["#lr_sche = optim.lr_scheduler.StepLR(config.optimizer, step_size=10000, gamma=0.5) # 20 step마다 lr조정\n","epochs = 50\n","log_interval = 22\n","\n","ready_to_train.train(epochs, log_interval)"],"metadata":{"id":"npJp9ifHaxJZ","executionInfo":{"status":"error","timestamp":1668498161409,"user_tz":-540,"elapsed":1311,"user":{"displayName":"정한이","userId":"07382370767374473405"}},"colab":{"base_uri":"https://localhost:8080/","height":327},"outputId":"2cdac2fb-0d68-4295-b98e-68ee870dfc2e"},"execution_count":88,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-88-e03a58855396>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mlog_interval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m22\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mready_to_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlog_interval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-78-6bd041de6b43>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, epochs, log_interval)\u001b[0m\n\u001b[1;32m     16\u001b[0m               \u001b[0mrunning_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m               \u001b[0;31m#lr_sche.step()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m               \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# batch 루프\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m                   \u001b[0;31m# get the inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m                   \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mglobaliter\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    679\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    680\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 681\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    682\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    683\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    719\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    720\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 721\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    722\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    723\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollate_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/utils/data/_utils/collate.py\u001b[0m in \u001b[0;36mdefault_collate\u001b[0;34m(batch)\u001b[0m\n\u001b[1;32m    181\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdefault_collate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msamples\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtransposed\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefault_collate_err_msg_format\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melem_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: default_collate: batch must contain tensors, numpy arrays, numbers, dicts or lists; found <class 'NoneType'>"]}]},{"cell_type":"code","source":[],"metadata":{"id":"v_G9yRgsO8F7"},"execution_count":null,"outputs":[]}]}